name: Refresh Token

on:
  push:
    branches: [ dev ]
  workflow_dispatch:
  schedule:
   - cron: '0 */48 * * *'
  watch:
    types: [started]

permissions: write-all

env:
  PRINT_LOG: True # Print out the log to Github Action log (True/False)
  TELEGRAM: True # Send log to telegram (True/False)

  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: $GITHUB_REPOSITORY
  RCLONE_CONFIG_FILE: ${{ secrets.RCLONE_CONFIG_FILE }}
  SECRET_REMOTES: ${{ secrets.REMOTES }}
  VAR_REMOTES: ${{ vars.REMOTES }}
  WORKSPACE: ${{ github.WORKSPACE }}

jobs:
  Refresh_Token:
    runs-on: ubuntu-latest
    continue-on-error: true

    outputs:
      TELEGRAM: ${{ env.TELEGRAM }}
      PRINT_LOG: ${{ env.PRINT_LOG }}

    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Cache Rclone installation
      uses: actions/cache@main
      id: cache-rclone
      if: ${{ always() }}
      with:
          path: |
            **/rclone
          key: cache-rclone
          
    - name: Install Rclone
      if: steps.cache-rclone.outputs.cache-hit != 'true'
      run: Scripts/Install_Rclone.sh

    - name: Download rlcone.conf
      if: ${{ env.RCLONE_CONFIG_FILE }}
      run: |
        rm -f rclone.conf
        wget -O rclone.conf ${{ env.RCLONE_CONFIG_FILE }} > /dev/null 2>&1

    - name: Recreate REMOTES.txt if it is in variable
      if: ${{ env.VAR_REMOTES }}
      run: |
        rm -f REMOTES.txt
        if [[ "${{ env.VAR_REMOTES }}" == "https://"* ]]; then
          wget -O REMOTES.txt ${{ env.VAR_REMOTES }}
        else
          echo "${{ env.VAR_REMOTES }}" > REMOTES.txt
        fi

    - name: Recreate REMOTES.txt if it is in secret
      if: ${{ env.SECRET_REMOTES }}
      run: |
        rm -f REMOTES.txt
        if [[ "${{ env.SECRET_REMOTES }}" == "https://"* ]]; then
          wget -O REMOTES.txt ${{ env.SECRET_REMOTES }} > /dev/null 2>&1
        else
          echo "${{ env.SECRET_REMOTES }}" > REMOTES.txt  > /dev/null 2>&1
        fi

    - name: Refresh Token
      run: Scripts/Refresh_Token.sh

    - name: Check if it needs to do sth with log
      id: check
      continue-on-error: true
      run: |
        if [[ "${{ env.PRINT_LOG }}" == "True" || "${{ env.TELEGRAM }}" == "True" ]]
        do
          echo "USE_ARTIFACT=True" >> $GITHUB_ENV
        done

    - name: Upload artifact
      if: ${{ env.USEARTIFACT == 'True' }}
      uses: actions/upload-artifact@main
      with:
        name: refresh_token_log
        path: refresh_token_log.txt

  Send_log_to_Telegram:
    runs-on: ubuntu-latest
    if: ${{ needs.Refresh_Token.outputs.TELEGRAM == 'True' }}
    needs: Refresh_Token
    steps:

    - name: Download artifact
      uses: actions/download-artifact@main
      with:
        name: refresh_token_log
        path: refresh_token_log.txt

    - name : Send log
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message_file: refresh_token_log.txt
        disable_notification: true

  Print_log_out_to_github_output:
    runs-on: ubuntu-latest
    if: ${{ needs.Refresh_Token.outputs.PRINT_LOG == 'True' }}
    needs: Refresh_Token
    steps:
    - name: Print log out to Github Action log
      run: cat refresh_token_log.txt

  Delete_artifact:
    runs-on: ubuntu-latest
    needs: [ Send_log_to_Telegram,Print_log_out_to_github_output ]
    steps:
    - name: Delete artifact
      uses: geekyeggo/delete-artifact@main
      with:
          name: refresh_token_log
